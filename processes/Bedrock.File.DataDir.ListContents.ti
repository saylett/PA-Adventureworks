#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process will list all files and processes in the data directory
# as text file output in the data directory itself
# In some cases the path to the batch file (in the data directory) must be fully qualified


### Constants ###

cProcess = 'Bedrock.File.DataDir.ListContents';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';
cBatchFile = cProcess | '.bat';


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pDataDir: ' | pDataDir );

EndIf;


### Build Command ###

nErrors = 0;

If( pDataDir @= '' );
  # If no data directory provided then use current directory
  sCommand = cBatchFile;
Else;
  # Trim off trailing backslash if present
  If( SubSt( pDataDir, Long( pDataDir ), 1 ) @= '\' );
    pDataDir = SubSt( pDataDir, 1, Long( pDataDir ) - 1 );
  EndIf;
  # Check that data directory exists
  If( FileExists( pDataDir ) = 0 );
    nErrors = 1;
    sMessage = 'Data directory does not exist: ' | pDataDir;
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    ItemReject( sMessage );
  Else;
    sCommand = pDataDir | '\' | cBatchFile;
  EndIf;
EndIf;

# Check that batch file exists
If( FileExists( sCommand ) = 0 );
  nErrors = 1;
  sMessage = 'Batch file not found: ' | sCommand;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;


### Create Batch File ###
DatasourceASCIIQuoteCharacter='';

sFileName = 'Excludes.txt';
ASCIIOUTPUT( sCommand, 'dir /b *.* > List_All_Data_Directory_Files.txt');
ASCIIOUTPUT( sCommand, 'dir /b }*.* > List_All_Control_Objects.txt');
ASCIIOUTPUT( sCommand, 'dir /b *.cub > List_All_Cubes.txt');
ASCIIOUTPUT( sCommand, 'dir /b *.dim > List_All_Dimensions.txt');
ASCIIOUTPUT( sCommand, 'dir /b *Bedrock*.* > List_All_Bedrock_Files.txt');
ASCIIOUTPUT( sCommand, 'dir /b *Bedrock*.pro > List_Bedrock_Processes.txt');



### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Execute Batch File

If( pDebug >= 1 );
  AsciiOutput( sDebugFile, 'Command: ' | sCommand );
EndIf;
If( pDebug <= 1 );
  ExecuteCommand ( sCommand, 0 );
EndIf;


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion