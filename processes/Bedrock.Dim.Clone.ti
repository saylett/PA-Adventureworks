#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process will clone the source dimension
# If the target dimension already exists then it will be overwritten


### Constants ###

cProcess = 'Bedrock.Dim.Clone' ;
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';
cSubset = '}' | cProcess;


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pSourceDim : ' | pSourceDim );
  AsciiOutput( sDebugFile, '            pTargetDim : ' | pTargetDim );
  AsciiOutput( sDebugFile, '            pAttr      : ' | NumberToString( pAttr ) );

EndIf;


### Validate Parameters ###

nErrors = 0;

# Validate source dimension
If( DimensionExists( pSourceDim ) = 0 );
  nErrors = 1;
  sMessage = 'Invalid source dimension: ' | pSourceDim;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate target dimension
If( pTargetDim @= '' % pTargetDim @= pSourceDim );
  pTargetDim = pSourceDim | '_Clone';
EndIf;


### Create target dimension ###

If( pDebug <= 1 );
  If( DimensionExists( pTargetDim ) = 0 );
    DimensionCreate( pTargetDim );
  Else;
    DimensionDeleteAllElements( pTargetDim );
  EndIf;
  DimensionSortOrder(pTargetDim, 'ByName', 'Ascending', 'ByHierarchy' , 'Ascending');
EndIf;


### Build Source Subset ###

If( SubsetExists( pSourceDim, cSubset ) = 1 );
  SubsetDeleteAllElements( pSourceDim, cSubset );
Else;
  SubsetCreate( pSourceDim, cSubset );
EndIf;
SubsetIsAllSet( pSourceDim, cSubset, 1 );


### Assign Data Source ###

DatasourceNameForServer = pSourceDim;
DatasourceNameForClient = pSourceDim;
DataSourceType = 'SUBSET';
DatasourceDimensionSubset = cSubset;


### Replicate Attributes ###

# Note: DType on Attr dim returns "AS", "AN" or "AA" need to strip off leading "A"

sAttrDim = '}ElementAttributes_' | pSourceDim;
If( pAttr = 1 & DimensionExists( sAttrDim ) = 1 );
  nNumAttrs = DimSiz( sAttrDim );
  nCount = 1;
  While( nCount <= nNumAttrs );
    sAttrName = DimNm( sAttrDim, nCount );
    sAttrType = SubSt(DType( sAttrDim, sAttrName ), 2, 1 );
    If( sAttrName @<> 'Format' );
      If( pDebug <= 1 );
        AttrInsert( pTargetDim, '', sAttrName, sAttrType );
      EndIf;
    EndIf;
    nCount = nCount + 1;
  End;
EndIf;


### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Check for errors in prolog ###

If( nErrors <> 0 );
  ProcessBreak;
EndIf;


### Add Elements to cloned dimension ###

If( pDebug <= 1 );

  sElType = DType( pSourceDim, vElement );

  DimensionElementInsert( pTargetDim, '', vElement, sElType );

  IF( sElType @= 'C' & ElCompN( pSourceDim, vElement ) > 0 );
    nChildren = ElCompN( pSourceDim, vElement );
    nCount = 1;
    While( nCount <= nChildren );
      sChildElement = ElComp( pSourceDim, vElement, nCount );
      sChildType = DType( pSourceDim, sChildElement );
      sChildWeight = ElWeight( pSourceDim, vElement, sChildElement );
      DimensionElementInsert( pTargetDim, '', sChildElement, sChildType );
      DimensionElementComponentAdd( pTargetDim, vElement, sChildElement, sChildWeight );
      nCount = nCount + 1;
    End;
  EndIf;

EndIf;


### End MetaData ###
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Check for errors in prolog ###

If( nErrors <> 0 );
  ProcessBreak;
EndIf;


### Replicate Attributes ###

# Note: DTYPE on Attr dim returns "AS", "AN" or "AA" need to strip off leading "A"

If( pDebug <= 1 );

  If( pAttr = 1 & DimensionExists( sAttrDim ) = 1 );

    nCount = 1;
    While( nCount <= nNumAttrs );
      sAttrName = DimNm( sAttrDim, nCount );
      sAttrType = SubSt( DTYPE( sAttrDim, sAttrName ), 2, 1 );
      If( sAttrType @= 'S' % sAttrType @= 'A' );
        sAttrVal = AttrS( pSourceDim, vElement, sAttrName );
        If( sAttrVal @<> '' );
          AttrPutS( sAttrVal, pTargetDim, vElement, sAttrName );
        EndIf;
      Else;
        nAttrVal = AttrN( pSourceDim, vElement, sAttrName );
        If( nAttrVal <> 0 );
          AttrPutN( nAttrVal, pTargetDim, vElement, sAttrName );
        EndIf;
      EndIf;
      nCount = nCount + 1;
    End;

  EndIf;

EndIf;


### End Data ###
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#####################################
##~~ Copyright Cubewise P/L 2010 ~~##
#####################################


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion