#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****
######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process will create ELPAR parent attributes and populate the attribute
# with the identlty of the consolidation( s ) that the element rolls up to


### Constants ###

cProcess = 'Bedrock.Dim.Attr.Create.FromParents';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';
cDimAttr = '}ElementAttributes_' | pDimension;


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pDimension : ' | pDimension );

EndIf;


### Validate Parameters ###

nErrors = 0;

# Validate dimension
If( Trim( pDimension ) @= '' );
  nErrors = 1;
  sMessage = 'No dimension specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DimensionExists( pDimension ) = 0 );
  nErrors = 1;
  sMessage = 'Dimension: ' | pDimension | ' does not exist';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DnLev( pDimension ) <= 1 );
  # If dimension is flat then no parents and no point to continue
  nErrors = 1;
  sMessage = 'Dimension: ' | pDimension | ' does not contain any consolidations';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;


### Create Temp subset ###

cSubTempMDX = '}' | cProcess | '.' | NumberToString( Int( Rand() * 100000 ) );

cMDX = '{ EXCEPT( { FILTER( { TM1SUBSETALL( [' | pDimension | '] ) }, MemberToStr( [' |
       pDimension | '].CurrentMember.Parent ) = "" ) },' |
       '{ TM1FILTERBYLEVEL( { TM1SUBSETALL( [' | pDimension | '] ) },0 ) } ) }';

If( SubsetExists( pDimension, cSubTempMDX ) = 1 );
  # It is unlikely that the subset already exists as the subset name contains a random numer
  # It is included in case the same random number is generated
  SubsetDestroy( pDimension, cSubTempMDX );
EndIf;
SubsetCreateByMDX( cSubTempMDX, cMDX );

# The number of top level hierarchies gives us the maximum possible number of parents for
# any given element ( exluding the possibility of elements with multiple parents WITHIN a
# hierarchy which should never happen. We can use this to set the number of parent
# attributes without having to loop through and count the parents of each element
nHier = SubsetGetSize( pDimension, cSubTempMDX );
SubsetDestroy( pDimension, cSubTempMDX );


### Create Parent Attributes ###

If( pDebug <= 1 );
  cAttrPrefix = 'ElPar';
  cAttrSuffix = '_Parent';
  nPar = 1;
  While( nPar <= nHier );
    sAttribute = cAttrPrefix | NumberToString( nPar ) | cAttrSuffix;
    If( DimIx( cDimAttr, sAttribute ) > 0 );
      AttrDelete( pDimension, sAttribute );
    EndIf;
    AttrInsert( pDimension, '', sAttribute, 'S' );
    nPar = nPar + 1;
  End;
EndIf;

### Assign Datasource ###

DataSourceType = 'SUBSET';
DatasourceNameForServer = pDimension;
DatasourceDimensionSubset = 'ALL';


### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Check for errors in prolog ###

If( nErrors <> 0 );
  ProcessBreak;
EndIf;


### Skip if element has no parents ###

If( ElPar( pDimension, vElement, 1 ) @= '' );
  ItemSkip;
EndIf;

nPar = 1;
While( ElPar( pDimension, vElement, nPar ) @<> '' );
  sAttribute = cAttrPrefix | NumberToString( nPar ) | cAttrSuffix;
  If( pDebug <= 1 );
    AttrPutS( ElPar( pDimension, vElement, nPar ), pDimension, vElement, sAttribute );
  EndIf;
  nPar = nPar + 1;
End;


### End Data ###
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****
#####################################
##~~ Copyright Cubewise P/L 2010 ~~##
#####################################


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion