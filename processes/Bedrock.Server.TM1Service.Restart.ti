#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process will restart TM1 Service

# WARNING !!
# This process calls a batch file which will restart the TM1 service.
# It should only be used after ensuring that all TM1 data is saved.
# Calling a restart via batch file is useful in instances where TM1 admin is not granted sufficient
# privileges on the box running TM1 to restart the service.
# Make sure the batch file 'Bedrock.Server.TM1Service.Restart.bat' is pointing to the correct server


### Constants ###

cProcess = 'Bedrock.Server.TM1Service.Restart';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';
cBatchFile = cProcess | '.bat';


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pService : ' | pService );
  AsciiOutput( sDebugFile, '            pDataDir : ' | pDataDir );

EndIf;


### Validate Parameters ###

nErrors = 0;

If( Trim( pService ) @= '' );
  nErrors = 1;
  sMessage = 'No service name specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;


### Build Command ###

If( Trim( pDataDir ) @= '' );
  # If no data directory provided then use current directory
  sCommand = cBatchFile | ' "' | pService | '"';
Else;
  # Trim off trailing backslash if present
  If( SubSt( pDataDir, Long( pDataDir ), 1 ) @= '\' );
    pDataDir = SubSt( pDataDir, 1, Long( pDataDir ) - 1 );
  EndIf;
  # Check that data directory exists
  If( FileExists( pDataDir ) = 0 );
    nErrors = 1;
    sMessage = 'Data directory does not exist: ' | pDataDir;
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    ItemReject( sMessage );
  Else;
    sCommand = pDataDir | '\' | cBatchFile | ' "' | pService | '"';
  EndIf;
EndIf;


### Execute Batch File ###

If( pDebug >= 1 );
  AsciiOutput( sDebugFile, 'Command: ' | sCommand );
EndIf;
If( pDebug <= 1 );
  ExecuteCommand ( sCommand, 0 );
EndIf;


### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Prolog ###
#endregion