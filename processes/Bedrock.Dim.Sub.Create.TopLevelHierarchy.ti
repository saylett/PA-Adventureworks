#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process will Create a Top Level Hiearchy by N-Level Elements
# that is a subset of all "top node" elements ( Consolidated elements that have no parents )

### Constants ###

cProcess = 'Bedrock.Dim.sub.TopLevelHierarchy.Create';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pDimension       : ' | pDimension );
  AsciiOutput( sDebugFile, '            pSubset          : ' | pSubset );
  AsciiOutput( sDebugFile, '            pConvertToStatic : ' | NumberToString( pConvertToStatic ) );

EndIf;


### Validate Parameters ###

nErrors = 0;

# Validate dimension
If( Trim( pDimension ) @= '' );
  nErrors = 1;
  sMessage = 'No dimension specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;
If( DimensionExists( pDimension ) = 0 );
  nErrors = 1;
  sMessage = 'Invalid dimension: ' | pDimension;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;
If( DnLev( pDimension ) <= 1 );
  # Create by MDX would return empty set and fail so need to abort here
  nErrors = 1;
  sMessage = 'Cannot continue dimension is flat: ' | pDimension;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIF;

# Validate subset
If( Trim( pSubset ) @= '' );
  pSubset = 'Top Level Hierarchies';
EndIf;


### MDX for creating subset ###

sMDX = '{EXCEPT( {FILTER( {TM1SUBSETALL( [' | pDimension | '] )}, MemberToStr( [' |
       pDimension | '].CurrentMember.Parent ) = "" )},' |
       '{TM1FILTERBYLEVEL( {TM1SUBSETALL( [' | pDimension | '] )},0 )} )}';


### Create Subset ###

If( pDebug <= 1 );

  # For a dynamic subset, the original subset MUST be destroyed first or the MDX will fail
  If( pConvertToStatic = 0 );
    If( SubsetExists( pDimension, pSubset ) = 1 );
      SubsetDestroy( pDimension, pSubset );
    EndIf;
    SubsetCreateByMDX( pSubset, sMDX );

  # For a static subset the subset does not need to be destroyed but its elements need to be deleted first
  Else;
    If( SubsetExists( pDimension, pSubset ) = 1 );
      SubsetDeleteAllElements( pDimension, pSubset );
    Else;
      SubsetCreate( pDimension, pSubset );
    EndIf;

    # Create a temporary MDX subset for processing
    sSubsetMDX = '}' | cProcess |'.' | NumberToString( Int( Rand() * 100000 ) );
    # It is unlikely that the subset already exists due to the random number in the subset name
    # However, it the SubsetDestroy is included in case the same random number is generated
    If( SubsetExists( pDimension, sSubsetMDX ) = 1 );
      SubsetDestroy( pDimension, sSubsetMDX );
    EndIf;
    SubsetCreateByMDX( sSubsetMDX, sMDX );

    # Transfer the elements from the MDX subset to the static subset
    nSubsetSize = SubsetGetSize( pDimension, sSubsetMDX );
    nSubsetIndex = 0;
    While( nSubsetIndex < nSubsetSize );
      nSubsetIndex = nSubsetIndex + 1;
      sElement = SubsetGetElementName( pDimension, sSubsetMDX, nSubsetIndex );
      SubsetElementInsert( pDimension, pSubset, sElement, nSubsetIndex );
    End;

    If( pDebug = 1 );
      AsciiOutput( sDebugFile, pSubset | ' Size: ', NumberToString( SubSetGetSize( pDimension, pSubset ) ) );
    EndIf;

  EndIf;

EndIf;


### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion