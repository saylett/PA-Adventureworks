#region Prolog

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process will create a parent rollup attribute for the nominated top node hierarchy
# and populate the value of the immediate parent within the nominated hierachy for each
# element in the dimension.

# Note:
# - It is assumed each element exists ONLY ONCE within the hierarchy.
# - This should hold true except in exceptional circumstances


### Constants ###

cProcess = 'Bedrock.Dim.Hierarchy.Create.FromAttr';
cSubProcess = 'Bedrock.Dim.Unwind.TargetConsol';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';
cAttributeDim = '}ElementAttributes_' | pDimension;


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pDimension : ' | pDimension );
  AsciiOutput( sDebugFile, '            pAttribute : ' | pAttribute );
  AsciiOutput( sDebugFile, '            pAllowNew  : ' | NumberToString( pAllowNew ) );
  AsciiOutput( sDebugFile, '            pUnwind    : ' | NumberToString( pUnwind ) );
  AsciiOutput( sDebugFile, '            pRecursive : ' | NumberToString( pRecursive ) );

EndIf;


### Validate Parameters ###

nErrors = 0;

# Validate dimension
If( Trim( pDimension ) @= '' );
  nErrors = 1;
  sMessage = 'No dimension specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DimensionExists( pDimension ) = 0 );
  nErrors = 1;
  sMessage = 'Dimension: ' | pDimension | ' does not exist';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate attribute
If( Trim( pAttribute ) @= '' );
  nErrors = 1;
  sMessage = 'No attribute specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DimIx( cAttributeDim, pAttribute ) = 0 );
  nErrors = 1;
  sMessage = 'Attribute: ' | pAttribute | ' does not exists in dimension: ' | pDimension;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DType( cAttributeDim, pAttribute ) @<> 'AS' );
  nErrors = 1;
  sMessage = 'Only string attributes may be used for this process';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate remaining parameters
If( pUnwind = 1 );
  # If target consol does not exist then break
  If( DimIx( pDimension, pAttribute ) = 0 );
    nErrors = 1;
    sMessage = 'Hierarchy: ' | pAttribute | ' does not exist in dimension: ' | pDimension;
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    DataSourceType = 'NULL';
    ItemReject( sMessage );
  EndIf;
  If( pRecursive <> 0 & pRecursive <> 1 );
    nErrors = 1;
    sMessage = 'Invalid value for pRecursive. Valid values are 0 or 1';
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    DataSourceType = 'NULL';
    ItemReject( sMessage );
  EndIf;
  If( pDebug <= 1 );
    ExecuteProcess( cSubProcess, 
      'pDimension', pDimension, 
      'pConsol', pAttribute, 
      'pRecursive', pRecursive );
  EndIf;
EndIf;

## Add attribute a top node of the hierarchy.
DimensionELementInsert( pDimension, '', pAttribute, 'C');


### Assign Datasource ###

DataSourceType = 'SUBSET';
DatasourceNameForServer = pDimension;
DatasourceDimensionSubset = 'ALL';


### End Prolog ###
#endregion
#region Metadata

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Check for errors in prolog ###

If( nErrors <> 0 );
  ProcessBreak;
EndIf;

### Skip if attribute is not populated ##

sParent = AttrS( pDimension, vElement, pAttribute );
If( sParent @= '' );
  ItemSkip;
EndIf;

# If parent does not exist AND allow insertion of new parents is TRUE then insert new consol
If( pDebug <= 1 );
  If( pallowNew = 1 );
    DimensionElementInsert( pDimension, '', sParent, 'C' );
    DimensionElementComponentAdd( pDimension, pAttribute, sParent, 1);
  Else;
    # parent attribute is invalid don't create the parent and exit
    ItemSkip;
  EndIf;
  # Add element to the parent specified by the attribute
  DimensionElementComponentAdd( pDimension, sParent, vElement, 1 );
EndIf;


### End Metadata ###
#endregion
#region Epilog

#####################################
##~~ Copyright Cubewise P/L 2010 ~~##
#####################################


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion