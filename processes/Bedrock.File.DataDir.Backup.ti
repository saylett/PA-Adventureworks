#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process will back up the Data Directory


### Constants ###

cProcess = 'Bedrock.File.DataDir.Backup';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Output parameters
  AsciiOutput( sDebugFile, 'Parameters: pDataDir   : ' | pDataDir );
  AsciiOutput( sDebugFile, '            pBackupDir : ' | pBackupDir );

EndIf;


### Validate Parameters ###

nErrors = 0;

# Remove leading and/or trailing spaces
pDataDir = Trim( pDataDir );
pBackupDir = Trim( pBackupDir );

# Remove trailing \ from directory names if present
If( SubSt( pDataDir, Long( pDataDir ), 1 ) @= '\' );
   pDataDir = SubSt( pDataDir, 1, Long( pDataDir ) - 1 );
EndIf;
If( SubSt( pBackupDir, Long( pBackupDir ),1 ) @= '\' );
   pBackupDir = SubSt( pBackupDir, 1, Long( pBackupDir ) - 1 );
EndIf;

# Check that data directory has been specified
If( pDataDir @= '' );
  nErrors = 1;
  sMessage = 'No data directory specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;

# Check that data directory exists
If( FileExists( pDataDir ) = 0 );
  nErrors = 1;
  sMessage = 'Source directory for backup does not exist: ' | pDataDir;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;

# Check that target directory has been specified
If( pBackupDir @= '' );
  nErrors = 1;
  sMessage = 'No backup directory specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;

# Check that target directory exists
If( FileExists( pBackupDir ) = 0 );
  nErrors = 1;
  sMessage = 'Destination directory for backup does not exist: ' | pBackupDir;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;


### Create Backup Subfolder ###
sBackupDir = pBackupDir | '\TM1Backup_' | cTimeStamp;
sCommand = 'Bedrock.MkDir.bat ' | '"' | sBackupDir | '"';

If( pDebug >= 1 );
  AsciiOutput( sDebugFile, 'Full Backup Directory: ' | sBackupDir | '\' );
EndIf;
If( pDebug <= 1 );
  ExecuteCommand ( sCommand, 1 );
  If( FileExists( sBackupDir ) = 0 );
    nErrors = 1;
    sMessage = 'Could not create backup directory: ' | sBackupDir;
    If( pDebug = 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    ItemReject( sMessage );
  EndIf;
EndIf;

### Save the model to disk
ExecuteProcess( 'Bedrock.Server.SaveDataAll' );

### Create Exclude File ###
DatasourceASCIIQuoteCharacter='';

sFileName = 'Excludes.txt';
ASCIIOUTPUT( sFileName, '.log');
ASCIIOUTPUT( sFileName, '.cfg');
ASCIIOUTPUT( sFileName, '.blb');
ASCIIOUTPUT( sFileName, '.csv');
ASCIIOUTPUT( sFileName, '.cmal');
ASCIIOUTPUT( sFileName, '.txt');

### Create Batch File ###
sFileName = 'Bedrock.File.DataDir.Backup.bat';
ASCIIOUTPUT( sFileName, 'XCOPY %1 %2 /i /c /s /e /y /exclude:EXCLUDES.txt');
#ASCIIOUTPUT( sFileName, 'Pause');


### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

### Copy Data Dir to Backup ###

sCommand = 'Bedrock.File.DataDir.Backup.bat ' | '"' | pDataDir | '"' | ' ' | '"' | sBackupDir | '"';

If( pDebug >= 1 );
  AsciiOutput( sDebugFile, 'Backup Command: ' | sCommand );
EndIf;
If( pDebug <= 1 );
  ExecuteCommand ( sCommand, 0 );
EndIf;


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion