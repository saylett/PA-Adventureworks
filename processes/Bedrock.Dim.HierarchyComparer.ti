#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

# This process creates a cube which compares 2 hierarchies within the same dimension
# It shows which N and C elements are in both hierarchies
# and which elements are unique to just one hierarchy

# Code for prolog tab
# No data source

# Set up 3 parameters:
# Parameter 1: pDim (the name of the dimension you wish to check)
# Parameter 2: pTopNode1 (the name of the top level in the first hierarchy)
# Parameter 3: pTopNode2 (the name of the top level in the second hierarchy)

### Constants ###

cProcess = 'Bedrock.Dim.HierarchyComparer';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';

### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pDim : ' | pDim );
  AsciiOutput( sDebugFile, 'Parameters: pTopNode1 : ' | pTopNode1 );
  AsciiOutput( sDebugFile, 'Parameters: pTopNode2 : ' | pTopNode2 );
EndIf;


### Validate Parameters ###

nErrors = 0;

# Validate dimension
If( Trim( pDim ) @= '' );
  nErrors = 1;
  sMessage = 'No dimension specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DimensionExists( pDim ) = 0 );
  nErrors = 1;
  sMessage = 'Dimension: ' | pDim | ' does not exist';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DnLev( pDim ) <= 1 );
  # If dimension is flat then there are no parents and there's no point continuing
  nErrors = 1;
  sMessage = 'Dimension: ' | pDim | ' does not contain any consolidations';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# For both of the nodes check that
# 1 - they are not blank
# 2 - they exist in the dimension
# 3 - they are C type


# Validate top node 1

If( Trim( pTopnode1 ) @= '' );
  nErrors = 1;
  sMessage = 'No dimension specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

If(DIMIX(pDim, pTopNode1) = 0);
  nErrors = 1;
  sMessage = 'Top node 1: ' | pTopNode1 | ' does not exist in the ' | pDim | ' dimension';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

If(DTYPE(pDim, pTopNode1) @<> 'C');
  nErrors = 1;
  sMessage = 'The specified top node 1 ' | pTopNode1 | ' is not a parent';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate top node 2

If( Trim( pTopNode2 ) @= '' );
  nErrors = 1;
  sMessage = 'No top node 2 specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

If(DIMIX(pDim, pTopNode2) = 0);
  nErrors = 1;
  sMessage = 'Top node 2: ' | pTopNode2 | ' does not exist in the ' | pDim | ' dimension';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

If(DTYPE(pDim, pTopNode2) @<> 'C');
  nErrors = 1;
  sMessage = 'The specified top node 2 ' | pTopNode2 | ' is not a parent';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

### End Validate Parameters ###

sDimNameSource = pDim;

### Create unwound dimension
# This will copy all the N and C level elements from both hierarchies
# to a new unwound dimension in which both C and N level are N level elements

# First create the dimension

sDimUnwound =  'BedrockTempDim_Hierarchy Comparer Unwound ' | sDimNameSource;
sDimNameTarget = sDimUnwound;

If(DimensionExists(sDimNameTarget) = 0);
  DimensionCreate(sDimNameTarget);
  Else;
  DimensionDeleteAllElements(sDimNameTarget);
EndIf;

# Add 2 parents: 1 for c level, 1 for n level

sParent = 'C and N Elements';
DimensionElementInsert(sDimNameTarget,' ', sParent, 'C');

sElement = 'C level';
DimensionElementInsert(sDimNameTarget,' ',sElement, 'C');
DimensionElementComponentAdd(sDimNameTarget, sParent, sElement, 1);

sElement = 'N level';
DimensionElementInsert(sDimNameTarget,' ',sElement, 'C');
DimensionElementComponentAdd(sDimNameTarget, sParent, sElement, 1);

#Add elements to the unwound dimension
nElements = DIMSIZ(sDimNameSource);
nCounter = 1;
WHILE (nCounter <= nElements);
  sElement = DIMNM(sDimNameSource, nCounter);
  If(ELISANC(sDimNameSource, pTopNode1, sElement) = 1 % ELISANC(sDimNameSource, pTopNode2, sElement) = 1 );
    If(DIMIX(sDimNameTarget, sElement) = 0);
      DimensionElementInsert(sDimNameTarget,' ', sElement, 'N');
      IF(DTYPE(sDimNameSource, sElement) @= 'C');
        DimensionElementComponentAdd(sDimNameTarget, 'C level', sElement, 1);
        Else;
        DimensionElementComponentAdd(sDimNameTarget, 'N level', sElement, 1);
      EndIf;
    EndIf;
  Endif;
  nCounter = nCounter + 1;
END;

### End create unwound dimension

### Create Measure Dimension
# Give the measure dimension a unique name because the delete process will delete the dimensions created by this process
# so you don't want the measure dimension to be shared

sDimMeasure =  'BedrockTempDim_Hierarchy Comparer Measure ' | pDim;
sDimNameTarget = sDimMeasure;
If(DimensionExists(sDimNameTarget) = 0);
  DimensionCreate(sDimNameTarget);
  Else;
  DimensionDeleteAllElements(sDimNameTarget);
EndIf;

#Add elements to dimension
sParent = 'All Nodes';
DimensionElementInsert(sDimNameTarget,' ', sParent, 'C');

sElement = pTopNode1;
DimensionElementInsert(sDimNameTarget,' ',sElement, 'N');
DimensionElementComponentAdd(sDimNameTarget, sParent, sElement, 1);

sElement = pTopNode2;
DimensionElementInsert(sDimNameTarget,' ',sElement, 'N');
DimensionElementComponentAdd(sDimNameTarget, sParent, sElement, 1);

### End Measure Dimension

### Create Cube
sCubeName = 'BedrockTempCube_Hierarchy Comparer ' | pDim;
If(CubeExists(sCubename) = 1);
  CubeDestroy(sCubename);
EndIf;

CubeCreate(sCubeName, sDimUnwound, sDimMeasure);
### End Create Cube

##Put code for Cell Put N on the epilog tab otherwise you get an error
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Debug ###

# Loop through the unwound dimension
# for each element, check whether it's a child of node A or node B or both

nLoopElements = DIMSIZ(sDimUnwound);

nLoopCounter = 1;

WHILE (nLoopCounter <= nLoopElements);
  sElement = DIMNM(sDimUnwound, nLoopCounter);
    If(ELISANC(sDimNameSource, pTopNode1, sElement) = 1);
      CellPutN(1, sCubeName,  sElement, pTopNode1);
    EndIf;

    If(ELISANC(sDimNameSource, pTopNode2, sElement) = 1 );
      CellPutN(1, sCubeName,  sElement, pTopNode2);
    EndIf;

  nLoopCounter = nLoopCounter + 1;

END;
#endregion