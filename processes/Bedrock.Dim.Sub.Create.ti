#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#####################################
##~~ Copyright Cubewise P/L 2010 ~~##
#####################################

# This process will create a static subset

# Note:
# - This process uses a number of parameters to determine what to include in the subset:
#   - pConsol      : If specified, only elements that are descendants of the consol will be included in the subset
#                    If blank, then this filter will be ignored
#   - pAttribute   : If specified, only elements that have a value equivalent to pAttributeValue will be included
#                    in the subset. If blank, this filter will be ignored
#   - pLevelFrom   : Only elements with a level greater than or equal to pLevelFrom will be included in the subset
#   - pLevelTo     : Only elements with a level less than or equal to pLevelFrom will be included in the subset
#   - pExclusions  : If pExclusions is specified then the elements (seperated by a delimiter) will be excluded
#                    from the subset
#   - pAddToSubset : If the specified subset already exists then this parameter will control whether elements will
#                    be added to the existing subset (value 1) or a new subset will be created (value 0)


### Constants ###

cProcess = 'Bedrock.Dim.Sub.Create';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';
cAttributeDim = '}ElementAttributes_' | pDimension;


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pDimension      : ' | pDimension );
  AsciiOutput( sDebugFile, '            pSubset         : ' | pSubset );
  AsciiOutput( sDebugFile, '            pConsol         : ' | pConsol );
  AsciiOutput( sDebugFile, '            pAttribute      : ' | pAttribute );
  AsciiOutput( sDebugFile, '            pAttributeValue : ' | pAttributeValue );
  AsciiOutput( sDebugFile, '            pLevelFrom      : ' | NumberToString( pLevelFrom ) );
  AsciiOutput( sDebugFile, '            pLevelTo        : ' | NumberToString( pLevelTo ) );
  AsciiOutput( sDebugFile, '            pExclusions     : ' | pExclusions );
  AsciiOutput( sDebugFile, '            pDelimiter      : ' | pDelimiter );
  AsciiOutput( sDebugFile, '            pAddToSubset    : ' | NumberToString( pAddToSubset ) );

EndIf;


### Validate Parameters ###

nErrors = 0;

# Validate dimension
If( Trim( pDimension ) @= '' );
  nErrors = 1;
  sMessage = 'No dimension specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;
If( DimensionExists( pDimension ) = 0 );
  nErrors = 1;
  sMessage = 'Invalid dimension: ' | pDimension;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;

# Validate subset
If( Trim( pSubset ) @= '' );
  nErrors = 1;
  sMessage = 'No subset specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;

# Validate consolidation
pConsol = Trim( pConsol );
If( pConsol @<> '' );
  If( DimIx( pDimension, pConsol ) = 0 );
    # The consolidation point does not exist in the dimension.
    nErrors = 1;
    sMessage = 'The ' | pConsol | ' consolidation does not exist in the '| pDimension |' dimension.';
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    ItemReject( sMessage );
  EndIf;
  If( DType( pDimension, pConsol ) @<> 'C' );
    nErrors = 1;
    sMessage = pConsol | ' is not a consolidated element in the '| pDimension |' dimension.';
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    ItemReject( sMessage );
  EndIf;
EndIf;

# Validate attribute
pAttribute = Trim( pAttribute );
If( pAttribute @<> '' );
  If( DimensionExists( cAttributeDim ) = 0 );
    nErrors = 1;
    sMessage = 'Dimension: ' | pDimension | ' does not have any attributes.';
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    ItemReject( sMessage );
  EndIf;
  If( DimIx( cAttributeDim, pAttribute ) = 0 );
    nErrors = 1;
    sMessage = 'The ' | pAttribute |' attribute does not exist in the ' | pDimension | ' dimension.';
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    ItemReject( sMessage );
  EndIf;
  If( Trim( pAttributeValue ) @= '' );
    nErrors = 1;
    sMessage = 'No attribute value specified';
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, sMessage );
    EndIf;
    ItemReject( sMessage );
  EndIf;
  sAttributeType = DType( cAttributeDim, pAttribute );
  If( sAttributeType @= 'AN' % sAttributeType @= 'N' );
    nAttributeValue = StringToNumber( pAttributeValue );
  EndIf;
EndIf;

# Validate element level
If( pLevelFrom < 0 % pLevelTo < 0 % pLevelTo < pLevelFrom );
  nErrors = 1;
  sMessage = 'Element levels must be greater than or equal to zero and level to must be greater than or equal to level from';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;

# Validate delimiter
If( pExclusions @<> '' & pDelimiter @= '' );
  pDelimiter = ';';
EndIf;

# Validate add to subset
If( pAddToSubset <> 0 & pAddToSubset <> 1 );
  nErrors = 1;
  sMessage = 'Invalid value for pAddToSubset: ' | NumberToString( pAddToSubset ) | '. Valid values are 0 and 1';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ItemReject( sMessage );
EndIf;


### Prepare subset ###

If( SubsetExists( pDimension, pSubset ) = 1 );
  If( pAddtoSubset <> 1 );
    If( pDebug <= 1 );
      SubsetDeleteAllElements( pDimension, pSubset );
    EndIf;
    nSubsetSize = 0;
  Else;
    nSubsetSize = SubsetGetSize( pDimension, pSubset );
  EndIf;
Else;
  If( pDebug <= 1 );
    SubsetCreate( pDimension, pSubset );
  EndIf;
  nSubsetSize = 0;
EndIf;


### Assign Datasource ###

DatasourceNameForServer = pDimension;
#DataSourceType = 'Subset';
DataSourceDimensionSubset = 'All';


### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#####################################
##~~ Copyright Cubewise P/L 2010 ~~##
#####################################


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Metadata.debug';

EndIf;


### Check for errors in prolog ###

If( nErrors <> 0 );
  ProcessBreak;
EndIf;


### Add elements to subset ###

# Check that element is a descendant of specified consolidation
If( pConsol @<> '' );
  If( ElIsAnc( pDimension, pConsol, vElement) = 0 & vElement @<> pConsol );
    ItemSkip;
  EndIf;
EndIf;

# Check that element has a matching attribute value
If( pAttribute @<> '' & pAttributeValue @<> '' );
  If( sAttributeType @= 'AN' % sAttributeType @= 'N' );
    If( AttrN( pDimension, vElement, pAttribute ) <> nAttributeValue );
      ItemSkip;
    EndIf;
  Else;
    If( AttrS( pDimension, vElement, pAttribute ) @<> pAttributeValue );
      ItemSkip;
    EndIf;
  EndIf;
EndIf;

# Check that element has an appropriate element level
nElementLevel = ElLev( pDimension, vElement );
If( nElementLevel < pLevelFrom % nElementLevel > pLevelTo );
  ItemSkip;
EndIf;

# Add element to subset
nSubsetSize = nSubsetSize + 1;
If( pDebug >= 1 );
  AsciiOutput( sDebugFile, 'Element: ' | vElement | ' to be added to subset.' );
EndIf;
If( pDebug <= 1 );
  SubsetElementInsert( pDimension, pSubset, vElement, nSubsetSize );
EndIf;


### End Metadata ###
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

EndIf;


### Process Exclusions ###

If( nErrors = 0 & pDebug <= 1 & Trim( pExclusions ) @<> '' );
  ExecuteProcess(
    'Bedrock.Dim.Sub.Exclude',
    'pDimension', pDimension,
    'pSubset', pSubset,
    'pElements', pExclusions,
    'pDelimiter', pDelimiter,
    'pDebug', pDebug
  );
EndIf;


### Finalise Debug ###

If( pDebug >= 1 );

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion