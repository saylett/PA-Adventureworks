#region Prolog

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# Process - This process backs out data entered by a client from a
# specific cube using the appropriate log file.

################################
##~~    Initialise

vPrologErr = 0;

################################
##~~    Check input parameters

IF( pDataSourcePath @= '' % pDataSourceFile @= '' );
  ProcessBreak;
EndIF;

IF( SubSt(pDataSourcePath, Long(pDataSourcePath), 1 ) @<> Char(92) );
  pDataSourcePath = pDataSourcePath | Char(92);
EndIF;

vDataSource = pDataSourcePath | pDataSourceFile;
IF( FileExists(vDataSource) = 0 );
  vPrologErr = 1;
  ItemReject( 'Invalid path or file: ' | vDataSource );
EndIF;

IF( pClient @<> '' & DIMIX('}Clients', pClient) = 0 );
  vPrologErr = 1;
  ItemReject('Invalid client specified: ' | pClient);
EndIF;

IF( pCube @<> '' & CubeExists(pCube) = 0 );
  vPrologErr = 1;
  ItemReject('Invalid cube specified: ' | pCube);
EndIF;

################################
##~~    Assign logfile datasource via parameters

DatasourceNameForClient = vDataSource;
DatasourceNameForServer = vDataSource;

################################
##~~                   End Prolog                   ~~##
################################
#endregion
#region Metadata

#endregion
#region Data

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

################################
##~~    Log file mapping

# v0 : Blank
# v1 : Time updated (yyyymmddhhmmss)
# v2 : Time updated (yyyymmddhhmmss)
# v3 : Client ID
# v4 : Cell type (String or Numeric S/N)
# v5 : Old value
# v6 : New value
# v7 : Cube name
# v8 : Dim 1 address
# v9 : Dim 2 address
# v10 : Dim 3 address
# v11 : Dim 4 address
# vXX : ... etc. ...
# v27 : Dim 20 address

################################
##~~    Check for valid source file

IF( vPrologErr > 0 );
  ProcessQuit;
EndIF;

################################
##~~    Check whether to skip record

# If client has been specified then skip if no match
IF( pClient @<> '' & v3 @<> pClient );
  ItemSkip;
EndIF;

# If cube has been specified then skip if no match
IF( pCube @<> '' & v7 @<> pCube );
  ItemSkip;
EndIF;

# Ignore Control Cubes
IF( SUBST( v7, 1, 1 ) @= '}' );
  ItemSkip;
EndIF;

# Check cube still exists on server
IF( CubeExists( v7 ) = 0 );
  ItemSkip;
EndIF;

################################
##~~    Get Number of Dims for Cube

iCount = 1;
While( TabDim(v7, iCount) @<> '' );
  iCount = iCount + 1;
End;
NumDims = iCount - 1;

IF( NumDims > 20 );
  ItemReject( 'Cube: ' | v7 | ' has more than 20 dimensions, TI must be modified to accomodate more dims.' );
EndIF;

################################
##~~    Write data from log file to cube(s)

# Selects the correct CellPut formula depending upon the number of dimensions in the cube
# and whether the value is numeric or string (max 21 dims catered for in this code)

Value_String = v5;

IF( v4 @= 'N' );
  Value_Numeric = NUMBR( Value_String );
  IF( NumDims = 2 );
    CellPutN( Value_Numeric, v7, v8, v9 );
  ElseIF( NumDims = 3 );
    CellPutN( Value_Numeric, v7, v8, v9, v10 );
  ElseIF( NumDims = 4 );
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11 );
  ElseIF( NumDims = 5 );
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12 );
  ElseIF( NumDims = 6);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13 );
  ElseIF( NumDims = 7);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14 );
  ElseIF( NumDims = 8);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15 );
  ElseIF( NumDims = 9);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );
  ElseIF( NumDims = 10);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );
  ElseIF( NumDims = 11);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );
  ElseIF( NumDims = 12);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );
  ElseIF( NumDims = 13);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );
  ElseIF( NumDims = 14);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );
  ElseIF( NumDims = 15);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );
  ElseIF( NumDims = 16);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );
  ElseIF( NumDims = 17);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24 );
  ElseIF( NumDims = 18);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25 );
  ElseIF( NumDims = 19);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26 );
  ElseIF( NumDims = 20);
    CellPutN( Value_Numeric, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27 );
  EndIF;

ElseIF( v4 @= 'S' );

  IF( NumDims = 2 );
    CellPutS( Value_String, v7, v8, v9 );
  ElseIF( NumDims = 3);
    CellPutS( Value_String, v7, v8, v9, v10 );
  ElseIF( NumDims = 4);
    CellPutS( Value_String, v7, v8, v9, v10, v11 );
  ElseIF( NumDims = 5);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12 );
  ElseIF( NumDims = 6);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13 );
  ElseIF( NumDims = 7);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14 );
  ElseIF( NumDims = 8);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15 );
  ElseIF( NumDims = 9);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );
  ElseIF( NumDims = 10);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );
  ElseIF( NumDims = 11);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );
  ElseIF( NumDims = 12);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );
  ElseIF( NumDims = 13);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );
  ElseIF( NumDims = 14);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );
  ElseIF( NumDims = 15);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );
  ElseIF( NumDims = 16);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );
  ElseIF( NumDims = 17);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24 );
  ElseIF( NumDims = 18);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25 );
  ElseIF( NumDims = 19);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26 );
  ElseIF( NumDims = 20);
    CellPutS( Value_String, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27 );
  EndIF;

EndIF;


################################
##~~                    End Data                     ~~##
################################
#endregion
#region Epilog

#endregion