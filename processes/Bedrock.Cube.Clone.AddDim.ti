#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process copies an existing cube and adds an extra dimension if the pNewDim parameter is not balnk
# There is an option to include data and rules when copying the cube.
# If a target cube name is specified that already exists in the model, that cube will be destroyed and recreated.
# If the target cube is left blank or is the same as the source cube the cloned cube will inherit the source
# cube name with "_Clone" appended.

# Notes:
# - As this TI has a view as a data source it requires the implicit variables NValue, SValue and Value_is_String
# - To edit this TI without VIZIER either a tmp cube with 24 dims is needed as the preview data source or set the data
#   source to ASCII and manually edit the TI in notepad after saving to add back the required implicit view variables


### Constants ###

cProcess = 'Bedrock.Cube.Clone.AddDim';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';
cRandomInt = NumberToString( INT( RAND( ) * 10000000 ));

### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pSourceCube   : ' | pSourceCube );
  AsciiOutput( sDebugFile, '            pTargetCube   : ' | pTargetCube );
  AsciiOutput( sDebugFile, '            pIncludeRules : ' | NumberToString( pIncludeRules ) );
  AsciiOutput( sDebugFile, '            pIncludeData  : ' | NumberToString( pIncludeData ) );
  AsciiOutput( sDebugFile, '            pFilter           : ' | pFilter );

  AsciiOutput( sDebugFile, '            pSuppressRules   : ' | NumberToString( pSuppressRules ) );
  AsciiOutput( sDebugFile, '            pNewDim   : ' | pNewDim );
  AsciiOutput( sDebugFile, '            pNewDimIndex   : ' | NumberToString( pNewDimIndex ) );
  AsciiOutput( sDebugFile, '            pNewElement   : ' | pElement );

  AsciiOutput( sDebugFile, '            pView   : ' | pView );
  AsciiOutput( sDebugFile, '            pDimensionDelim   : ' | pDimensionDelim );
  AsciiOutput( sDebugFile, '            pElementStartDelim: ' | pElementStartDelim );
  AsciiOutput( sDebugFile, '            pElementDelim     : ' | pElementDelim );

EndIf;


### Initialise ###

nDataCheck = 0;


### Validate Parameters ###

nErrors = 0;

# Validate source cube
If( pSourceCube @= '' % CubeExists( pSourceCube ) = 0 );
  nErrors = 1;
  sMessage = 'Invalid source cube specified: ' | pSourceCube;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate target cube
If( pTargetCube @= '' % pTargetCube @= pSourceCube );
  pTargetCube = pSourceCube | '_Clone';
EndIf;

# A view name wasn't provided, so just use a timestamp
If( TRIM(pView) @= '' );
  sMessage = 'A view name was not provided';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  pView = cTimestamp | cRandomInt;
EndIf;





### Determine number of dims in source cube ###

nDimensionCount = 0;
While( TabDim( pSourceCube, nDimensionCount + 1 ) @<> '' );
  nDimensionCount = nDimensionCount + 1;
End;

If( nDimensionCount > 24 );
  nErrors = 1;
  sMessage = 'Cube has too many dimensions: ' | pSourceCube | ' max 24 dims catered for, TI must be altered to accomodate.';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;


### Add 1 to the dimension count because the new cube will have 1 extra dimension
nDimensionCount = nDimensionCount + 1;

### Set how many variables are in the source
nVariables = nDimensionCount +1;


### Check to see if target cube exists ###

If( CubeExists( pTargetCube ) = 1 );
  If( pDebug <= 1 );
    CubeDestroy( pTargetCube );
  EndIf;
EndIf;

### Create new dimenion if pNewDim is not blank and pNewDim doesn't already exist

If( LONG(pNewDim) > 0);
  If(DimensionExists(pNewDim) = 0);
    DimensionCreate(pNewDim);
  EndIf;
EndIf;

### Add element
If(LONG(pElement)>0);
  If(DIMIX(pNewDim, pElement) = 0);
    DimensionElementInsert( pNewDim, '',  pElement, 'N');
  EndIf;
EndIf;

### Renumber dimensions so new dimension can be inserted

# First make sure the position of the new dimension is valid
# Default is to put the new dim at the end

If(pNewDimIndex > nDimensionCount);
  pNewDimIndex = nDimensionCount;
EndIf;

If(pNewDimIndex < 1);
  pNewDimIndex = nDimensionCount;
EndIf;

### Identify the dimensions

If(pNewDimIndex = 1);
  sDim1 = pNewDim;
  Else;
  sDim1 = TabDim( pSourceCube, 1 );
EndIf;


nIndex = 2;
If(pNewDimIndex = nIndex);
  sDim2 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim2 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim2 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 3;
If(pNewDimIndex = nIndex);
  sDim3 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim3 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim3 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 4;
If(pNewDimIndex = nIndex);
  sDim4 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim4 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim4 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 5;
If(pNewDimIndex = nIndex);
  sDim5 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim5 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim5 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 6;
If(pNewDimIndex = nIndex);
  sDim6 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim6 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim6 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 7;
If(pNewDimIndex = nIndex);
  sDim7 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim7 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim7 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 8;
If(pNewDimIndex = nIndex);
  sDim8 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim8 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim8 = TabDim( pSourceCube, nIndex );
EndIf;



nIndex = 9;
If(pNewDimIndex = nIndex);
  sDim9 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim9 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim9 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 10;
If(pNewDimIndex = nIndex);
  sDim10 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim10 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim10 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 11;
If(pNewDimIndex = nIndex);
  sDim11 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim11 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim11 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 12;
If(pNewDimIndex = nIndex);
  sDim12 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim12 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim12 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 13;
If(pNewDimIndex = nIndex);
  sDim13 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim13 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim13 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 14;
If(pNewDimIndex = nIndex);
  sDim14 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim14 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim14 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 15;
If(pNewDimIndex = nIndex);
  sDim15 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim15 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim15 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 16;
If(pNewDimIndex = nIndex);
  sDim16 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim16 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim16 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 17;
If(pNewDimIndex = nIndex);
  sDim17 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim17 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim17 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 18;
If(pNewDimIndex = nIndex);
  sDim18 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim18 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim18 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 19;
If(pNewDimIndex = nIndex);
  sDim19 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim19 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim19 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 20;
If(pNewDimIndex = nIndex);
  sDim20 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim20 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim20 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 21;
If(pNewDimIndex = nIndex);
  sDim21 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim21 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim21 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 22;
If(pNewDimIndex = nIndex);
  sDim22 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim22 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim22 = TabDim( pSourceCube, nIndex );
EndIf;


nIndex = 23;
If(pNewDimIndex = nIndex);
  sDim23 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim23 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim23 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 24;
If(pNewDimIndex = nIndex);
  sDim24 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim24 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim24 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 25;
If(pNewDimIndex = nIndex);
  sDim25 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim25 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim25 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 26;
If(pNewDimIndex = nIndex);
  sDim26 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim26 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim26 = TabDim( pSourceCube, nIndex );
EndIf;

nIndex = 27;
If(pNewDimIndex = nIndex);
  sDim27 = pNewDim;
  ElseIf(pNewDimIndex < nIndex);
  sDim27 = TabDim( pSourceCube, nIndex -1 );
  Else;
  sDim27 = TabDim( pSourceCube, nIndex );
EndIf;

### Create target cube ###

If( pDebug <= 1 );

  If( nDimensionCount = 2 );
    CubeCreate( pTargetCube, sDim1, sDim2 );
  ElseIf( nDimensionCount = 3 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3 );
  ElseIf( nDimensionCount = 4 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4 );
  ElseIf( nDimensionCount = 5 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5 );
  ElseIf( nDimensionCount = 6 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6 );
  ElseIf( nDimensionCount = 7 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7 );
  ElseIf( nDimensionCount = 8 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8 );
  ElseIf( nDimensionCount = 9 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9 );
  ElseIf( nDimensionCount = 10 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10 );
  ElseIf( nDimensionCount = 11 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11 );
  ElseIf( nDimensionCount = 12 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12 );
  ElseIf( nDimensionCount = 13 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13 );
  ElseIf( nDimensionCount = 14 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14 );
  ElseIf( nDimensionCount = 15 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15 );
  ElseIf( nDimensionCount = 16 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16 );
  ElseIf( nDimensionCount = 17 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17 );
  ElseIf( nDimensionCount = 18 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17, sDim18 );
  ElseIf( nDimensionCount = 19 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17, sDim18, sDim19 );
  ElseIf( nDimensionCount = 20 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17, sDim18, sDim19, sDim20 );
  ElseIf( nDimensionCount = 21 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17, sDim18, sDim19, sDim20, sDim21 );
  ElseIf( nDimensionCount = 22 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22 );
  ElseIf( nDimensionCount = 23 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23 );
  ElseIf( nDimensionCount = 24 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, sDim24 );

  ElseIf( nDimensionCount = 25 );
    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,
                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, sDim24, sDim25 );
  EndIf;

EndIf;

### Create View of Source ###

If( pDebug >= 1 );
  AsciiOutput( sDebugFile, 'Filter for source view is ' | pFilter );
EndIf;

ExecuteProcess('Bedrock.Cube.View.Create',
  'pCube',pSourceCube,
  'pView', pView,
  'pFilter', pFilter,
  'pSuppressZero',1,
  'pSuppressConsol', 1,
  'pSuppressRules', pSuppressRules,
  'pDimensionDelim', pDimensionDelim,
  'pElementStartDelim', pElementStartDelim,
  'pElementDelim', pElementDelim,
  'pDebug', pDebug);

### Assign Datasource ###

If( pIncludeData = 1 );

  # Validate View
    If( ViewExists( pSourceCube, pView ) = 0 );
      nErrors = 1;
      sMessage = 'There was a problem creating view: ' | pView | ' for cube: ' | pSourceCube;
      If( pDebug >= 1 );
        AsciiOutput( sDebugFile, sMessage );
      EndIf;
      DataSourceType = 'NULL';
      ItemReject( sMessage );
    EndIf;


  DataSourceType = 'VIEW';
  DatasourceNameForServer = pSourceCube;
  DatasourceNameForClient = pSourceCube;
  DatasourceCubeView = pView;

  NValue = 0;
  SValue = '0';
  Value_is_String = 0;

  Else;
  nDataCheck = nDataCheck + 1;
  DataSourceType = 'NULL';
EndIf;


### End Prolog ###

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Check for error in prolog ###

If( nErrors > 0 );
  ProcessBreak;
EndIf;


### Check whether only cube structure being copied or also cube data ###

If( pIncludeData = 0 );
  ProcessBreak;
EndIf;

### Renumber the dimensions in the source to make way for the new dimension

# Remember that the number of variables needed is 1 more than the number of dimensions in the target cube and 2 more than the
# number of dimensions in the source cube

# If the new dimension is the last dimension and the last dimension in the source cube had strings, you can't copy the strings because
# then you would have strings in both the last and second last dimensions
# but you can only have string elements in the last dimension



nIndex = 1;
If(pNewDimIndex = nIndex);
  NewV1 = pElement;
  Else;
  NewV1 = v1;
EndIf;

nIndex = 2;
  If(pNewDimIndex = nIndex);
    NewV2 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV2 = v1;
          Else;
          NewV2 = v2;
        EndIf;
      EndIf;
  EndIf;

nIndex = 3;
  If(pNewDimIndex = nIndex);
    NewV3 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV3 = v2;
          Else;
          NewV3 = v3;
        EndIf;
      EndIf;
  EndIf;

nIndex = 4;
  If(pNewDimIndex = nIndex);
    NewV4 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV4 = v3;
          Else;
          NewV4 = v4;
        EndIf;
      EndIf;
  EndIf;

nIndex = 5;
  If(pNewDimIndex = nIndex);
    NewV5 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV5 = v4;
          Else;
          NewV5 = v5;
        EndIf;
      EndIf;
  EndIf;


nIndex = 6;
  If(pNewDimIndex = nIndex);
    NewV6 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV6 = v5;
          Else;
          NewV6 = v6;
        EndIf;
      EndIf;
  EndIf;


nIndex = 7;
  If(pNewDimIndex = nIndex);
    NewV7 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV7 = v6;
          Else;
          NewV7 = v7;
        EndIf;
      EndIf;
  EndIf;

nIndex = 8;
  If(pNewDimIndex = nIndex);
    NewV8 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV8 = v7;
          Else;
          NewV8 = v8;
        EndIf;
      EndIf;
  EndIf;

nIndex = 9;
  If(pNewDimIndex = nIndex);
    NewV9 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV9 = v8;
          Else;
          NewV9 = v9;
        EndIf;
      EndIf;
  EndIf;

nIndex = 10;
  If(pNewDimIndex = nIndex);
    NewV10 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV10 = v9;
          Else;
          NewV10 = v10;
        EndIf;
      EndIf;
  EndIf;


nIndex = 11;
  If(pNewDimIndex = nIndex);
    NewV11 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV11 = v10;
          Else;
          NewV11 = v11;
        EndIf;
      EndIf;
  EndIf;

nIndex = 12;
  If(pNewDimIndex = nIndex);
    NewV12 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV12 = v11;
          Else;
          NewV12 = v12;
        EndIf;
      EndIf;
  EndIf;

nIndex = 13;
  If(pNewDimIndex = nIndex);
    NewV13 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV13 = v12;
          Else;
          NewV13 = v13;
        EndIf;
      EndIf;
  EndIf;

nIndex = 14;
  If(pNewDimIndex = nIndex);
    NewV14 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV14 = v13;
          Else;
          NewV14 = v14;
        EndIf;
      EndIf;
  EndIf;

nIndex = 15;
  If(pNewDimIndex = nIndex);
    NewV15 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV15 = v14;
          Else;
          NewV15 = v15;
        EndIf;
      EndIf;
  EndIf;

nIndex = 16;
  If(pNewDimIndex = nIndex);
    NewV16 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV16 = v15;
          Else;
          NewV16 = v16;
        EndIf;
      EndIf;
  EndIf;


nIndex = 17;
  If(pNewDimIndex = nIndex);
    NewV17 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV17 = v16;
          Else;
          NewV17 = v17;
        EndIf;
      EndIf;
  EndIf;

nIndex = 18;
  If(pNewDimIndex = nIndex);
    NewV18 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV18 = v17;
          Else;
          NewV18 = v18;
        EndIf;
      EndIf;
  EndIf;

nIndex = 19;
  If(pNewDimIndex = nIndex);
    NewV19 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV1 = v17;
          Else;
          NewV18 = v18;
        EndIf;
      EndIf;
  EndIf;

nIndex = 20;
  If(pNewDimIndex = nIndex);
    NewV20 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV20 = v19;
          Else;
          NewV20 = v20;
        EndIf;
      EndIf;
  EndIf;

nIndex = 21;
  If(pNewDimIndex = nIndex);
    NewV21 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV21 = v20;
          Else;
          NewV21 = v21;
        EndIf;
      EndIf;
  EndIf;


nIndex = 22;
  If(pNewDimIndex = nIndex);
    NewV22 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV22 = v21;
          Else;
          NewV22 = v22;
        EndIf;
      EndIf;
  EndIf;

nIndex = 23;
  If(pNewDimIndex = nIndex);
    NewV23 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV23 = v22;
          Else;
          NewV23 = v23;
        EndIf;
      EndIf;
  EndIf;

nIndex = 24;
  If(pNewDimIndex = nIndex);
    NewV24 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV24 = v23;
          Else;
          NewV24 = v24;
        EndIf;
      EndIf;
  EndIf;


nIndex = 25;
  If(pNewDimIndex = nIndex);
    NewV25 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV25 = v24;
          Else;
          NewV25 = v25;
        EndIf;
      EndIf;
  EndIf;

nIndex = 26;
  If(pNewDimIndex = nIndex);
    NewV26 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV26 = v25;
          Else;
          NewV26 = v26;
        EndIf;
      EndIf;
  EndIf;

nIndex = 27;
  If(pNewDimIndex = nIndex);
    NewV27 = pElement;
    Else;
      If(nVariables >= nIndex );
        If(pNewDimIndex < nIndex);
          NewV27 = v26;
          Else;
          NewV27 = v27;
        EndIf;
      EndIf;
  EndIf;

# in order to reuse the code from the clone cube process
# map the new varaibale names back to the original names

v1 = NewV1;
v2 = NewV2;
v3 = NewV3;
v4 = NewV4;
v5 = NewV5;
v6 = NewV6;
v7 = NewV7;
v8 = NewV8;
v9 = NewV9;
v10 = NewV10;
v11 = NewV11;
v12 = NewV12;
v13 = NewV13;
v14 = NewV14;
v15 = NewV15;
v16 = NewV16;
v17 = NewV17;
v18 = NewV18;
v19 = NewV19;
v20 = NewV20;
v21 = NewV21;
v22 = NewV22;
v23 = NewV23;
v24 = NewV24;
v25 = NewV25;
v25 = NewV26;
v25 = NewV27;

### Write data from source cube to target cube ###

# Selects the correct CellPut formula depending upon the number of dimensions in the cube
# and whether the value is numeric or string ( max 24 dims catered for in this code )
# value type determined by element type of last dimension in cube

If( pDebug <= 1 );

  If( nDimensionCount = 2 );
    sElType = DType( sDim2, v2 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v3 ), pTargetCube, v1, v2 );
    Else;
      CellPutS( v3, pTargetCube, v1, v2 );
    EndIf;
  ElseIf( nDimensionCount = 3 );
    sElType = DType( sDim3, v3 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v4 ), pTargetCube, v1, v2, v3 );
    Else;
      CellPutS( v4, pTargetCube, v1, v2, v3 );
    EndIf;
  ElseIf( nDimensionCount = 4 );
    sElType = DType( sDim4, v4 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v5 ), pTargetCube, v1, v2, v3, v4 );
    Else;
      CellPutS( v5, pTargetCube, v1, v2, v3, v4 );
    EndIf;
  ElseIf( nDimensionCount = 5 );
    sElType = DType( sDim5, v5 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v6 ), pTargetCube, v1, v2, v3, v4, v5 );
    Else;
      CellPutS( v6, pTargetCube, v1, v2, v3, v4, v5 );
    EndIf;
  ElseIf( nDimensionCount = 6 );
    sElType = DType( sDim6, v6 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v7 ), pTargetCube, v1, v2, v3, v4, v5, v6 );
    Else;
      CellPutS( v7, pTargetCube, v1, v2, v3, v4, v5, v6 );
    EndIf;
  ElseIf( nDimensionCount = 7 );
    sElType = DType( sDim7, v7 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v8 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7 );
    Else;
      CellPutS( v8, pTargetCube, v1, v2, v3, v4, v5, v6, v7 );
    EndIf;
  ElseIf( nDimensionCount = 8 );
    sElType = DType( sDim8, v8 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v9 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8 );
    Else;
      CellPutS( v9, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8 );
    EndIf;
  ElseIf( nDimensionCount = 9 );
    sElType = DType( sDim9, v9 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v10 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );
    Else;
      CellPutS( v10, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );
    EndIf;
  ElseIf( nDimensionCount = 10 );
    sElType = DType( sDim10, v10 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v11 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 );
    Else;
      CellPutS( v11, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 );
    EndIf;
  ElseIf( nDimensionCount = 11 );
    sElType = DType( sDim11, v11 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v12 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );
    Else;
      CellPutS( v12, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );
    EndIf;
  ElseIf( nDimensionCount = 12 );
    sElType = DType( sDim12, v12 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v13 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );
    Else;
      CellPutS( v13, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );
    EndIf;
  ElseIf( nDimensionCount = 13 );
    sElType = DType( sDim13, v13 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v14 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );
    Else;
      CellPutS( v14, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );
    EndIf;
  ElseIf( nDimensionCount = 14 );
    sElType = DType( sDim14, v14 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v15 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );
    Else;
      CellPutS( v15, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );
    EndIf;
  ElseIf( nDimensionCount = 15 );
    sElType = DType( sDim15, v15 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v16 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );
    Else;
      CellPutS( v16, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );
    EndIf;
  ElseIf( nDimensionCount = 16 );
    sElType = DType( sDim16, v16 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v17 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );
    Else;
      CellPutS( v17, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );
    EndIf;
  ElseIf( nDimensionCount = 17 );
    sElType = DType( sDim17, v17 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v18 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );
    Else;
      CellPutS( v18, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );
    EndIf;
  ElseIf( nDimensionCount = 18 );
     sElType = DType( sDim18, v18 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v19 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );
    Else;
      CellPutS( v19, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );
    EndIf;
  ElseIf( nDimensionCount = 19 );
     sElType = DType( sDim19, v19 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v20 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );
    Else;
      CellPutS( v20, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );
    EndIf;
  ElseIf( nDimensionCount = 20 );
     sElType = DType( sDim20, v20 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v21 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );
    Else;
      CellPutS( v21, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );
    EndIf;
  ElseIf( nDimensionCount = 21 );
     sElType = DType( sDim21, v21 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v22 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );
    Else;
      CellPutS( v22, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );
    EndIf;
  ElseIf( nDimensionCount = 22 );
     sElType = DType( sDim22, v22 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v23 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );
    Else;
      CellPutS( v23, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );
    EndIf;
  ElseIf( nDimensionCount = 23 );
     sElType = DType( sDim23, v23 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v24 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
      v23 );
    Else;
      CellPutS( v24, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );
    EndIf;
  ElseIf( nDimensionCount = 24 );
     sElType = DType( sDim24, v24 );
    If( sElType @<> 'S' );
      CellPutN( Numbr( v25 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
      v23, v24 );
    Else;
      CellPutS( v25, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24 );
    EndIf;
  EndIf;

EndIf;


### End Data ###
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

### Destroy temporary views and subsets ###
If(pDebug <= 1 );
  # Delete source view
  ExecuteProcess('Bedrock.Cube.View.DeleteWithSubsets',
    'pCube', pSourceCube,
    'pView', pView,
    'pMode', 1,
    'pDebug', pDebug);
EndIf;

### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

EndIf;


### Attach rules to cloned cube ###

If( nErrors = 0 & pIncludeRules = 1 );
  sRuleFile = pSourceCube | '.rux';
  If( FileExists( sRuleFile ) = 1 );
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, 'Rules file found' );
    EndIf;
    If( pDebug <= 1 );
      RuleLoadFromFile( pTargetCube, sRuleFile );
    EndIf;
  Else;
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, 'Cannot attach rule.  No rules exist in source cube: ' | pSourceCube );
    EndIf;
  EndIf;
EndIf;


### Finalise Debug ###

If( pDebug >= 1 );

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;

### End Epilog ###
#endregion