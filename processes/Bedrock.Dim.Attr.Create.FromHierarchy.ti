#region Prolog

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################

# This process will create a parent rollup attribute for the nominated top node hierarchy
# and populate the value of the immediate parent within the nominated hierachy for each
# element in the dimension.

# Note:
# - It is assumed each element exists ONLY ONCE within the hierarchy.
#   This should hold true except in exceptional circumstances

### Constants ###

cProcess = 'Bedrock.Dim.Attr.Create.FromHierarchy';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';
cDimAttr = '}ElementAttributes_' | pDimension;


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pDimension : ' | pDimension );
  AsciiOutput( sDebugFile, '            pHierarchy : ' | pHierarchy );

EndIf;


### Validate Parameters ###

nErrors = 0;

# Validate dimension
If( Trim( pDimension ) @= '' );
  nErrors = 1;
  sMessage = 'No dimension specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DimensionExists( pDimension ) = 0 );
  nErrors = 1;
  sMessage = 'Dimension: ' | pDimension | ' does not exist';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DnLev( pDimension ) <= 1 );
  # If dimension is flat then no parents and no point to continue
  nErrors = 1;
  sMessage = 'Dimension: ' | pDimension | ' does not contain any consolidations';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate hierarchy
If( Trim( pHierarchy ) @= '' );
  nErrors = 1;
  sMessage = 'No hierarchy specified';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;
If( DimIx( pDimension, pHierarchy ) = 0 % ElCompN( pDimension, pHierarchy ) = 0 );
  # If the nominated hierarchy has no children then exit
  nErrors = 1;
  sMessage = 'Hierarchy: ' | pHierarchy | ' does not exist or has no children';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

If( ElPar( pDimension, pHierarchy, 1 ) @<> '' );
  # If the nominated hierarchy has a parent it is not a true top node so exit
  nErrors = 1;
  sMessage = 'Hierarchy: ' | pHierarchy | ' is not a true top node';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;


### Create Parent Attribute ###

If( pDebug <= 1 );
  cHierAttr = 'Hierarchy_' | DimensionElementPrincipalName( pDimension, pHierarchy ) | '_Parent';
  If( DimIx( cDimAttr, cHierAttr ) > 0 );
    AttrDelete( pDimension, cHierAttr );
  EndIf;
  AttrInsert( pDimension, '', cHierAttr, 'S' );
EndIf;


### Assign Datasource ###

DataSourceType = 'SUBSET';
DatasourceNameForServer = pDimension;
DatasourceDimensionSubset = 'ALL';


### End Prolog ###
#endregion
#region Data

######################################
##~~  Copyright Cubewise P/L 2010 ~~##
######################################


### Check for errors in prolog ###

If( nErrors <> 0 );
  ProcessBreak;
EndIf;


### Skip if element is not a descendent of nominated top node hierarchy ###

If( ElIsAnc( pDimension, pHierarchy, vElement ) <> 1 );
  ItemSkip;
EndIf;

If( pDebug <= 1 );
  nPar = 1;
  nMax = ElParN( pDimension, vElement );
  While( nPar <= nMax );
    sPar = ElPar( pDimension, vElement, nPar );
    # Test if this parent is also a descendent of the top node
    If( sPar @= pHierarchy % ElIsAnc( pDimension, pHierarchy, sPar ) = 1 );
      AttrPutS( sPar, pDimension, vElement, cHierAttr );
      # we have found the correct parent so exit
      nPar = nMax;
    EndIf;
    nPar = nPar + 1;
  End;
EndIf;


### End Data ###
#endregion
#region Epilog

#####################################
##~~ Copyright Cubewise P/L 2010 ~~##
#####################################


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion